{{#info}}
package {{processorTarget.packageName}}; 

import java.util.ArrayDeque;
import java.util.List;
import java.util.ListIterator;
import java.util.function.BiFunction;

{{#allModels}}
import {{inputClassPackageName}}.{{name}};
{{/allModels}}

public class {{processorTarget.className}} {

	private final {{rootModel.name}} subject;

	public {{processorTarget.className}}({{rootModel.name}} subject) {
		this.subject = subject;
	}

	public void visitValuesAtPath(String path, {{rootModel.name}}Visitor visitor) {
		InternalPathProcessor processor = new InternalPathProcessor(visitor, path);
		processor.visitObject(subject, processor::visit{{rootModel.name}});
	}

	public static interface {{rootModel.name}}Visitor {

		default ProcessInstruction visitResolvedPathValue(String path, Object[] objectPathToValue, String value) {
			return ProcessInstruction.CONTINUE;
		}
		
	}
	
	public enum ProcessInstruction {
		ABORT, CONTINUE
	}

	private static final class InternalPathProcessor {

		private final {{rootModel.name}}Visitor visitor;
		private final ArrayDeque<Object> currentPathElements = new ArrayDeque<>();
		private final String path;
		private ListIterator<String> pathIterator;

		public InternalPathProcessor(AssetAdministrationShellDescriptorVisitor visitor, String path) {
			this.visitor = visitor;
			this.path = path;
			String[] pathAsArray = path.split("\\.");
			pathIterator = List.of(pathAsArray).listIterator();
		}

		{{#allModels}}
		public ProcessInstruction visit{{name}}({{name}} toVisit, String segment) {
			switch (segment) {
			{{#complexRangeRelations}}
			case {{info.pathsTarget.className}}.SEGMENT_{{attributeNameUpper}}:
				{{#isListRange}}
				return visitObjectList(toVisit.get{{attributeNameUpperFirst}}(), this::visit{{modelName}});
				{{/isListRange}}
				{{^isListRange}}
				return visitObject(toVisit.get{{attributeNameUpperFirst}}(), this::visit{{modelName}});
				{{/isListRange}}
			{{/complexRangeRelations}}
			{{#primitiveRangeRelations}}
			case {{info.pathsTarget.className}}.SEGMENT_{{attributeNameUpper}}:
				{{#isListRange}}
				return visitPrimitiveValueList(toVisit.get{{attributeNameUpperFirst}}());
				{{/isListRange}}
				{{^isListRange}}
				return visitPrimitiveValue(toVisit.get{{attributeNameUpperFirst}}());
				{{/isListRange}}
			{{/primitiveRangeRelations}}
			default:
				{{#subModels}}
				if (toVisit instanceof {{.}}) {
					return visit{{.}}(({{.}}) toVisit, segment);
				}
				{{/subModels}}
				return ProcessInstruction.CONTINUE;
			}
		}
		
		{{/allModels}}
		private <T> ProcessInstruction visitObjectList(List<T> list,
				BiFunction<T, String, ProcessInstruction> processor) {
			if (list != null) {
				for (T eachValue : list) {
					if (visitObject(eachValue, processor) == ProcessInstruction.ABORT) {
						return ProcessInstruction.ABORT;
					}
				}
			}
			return ProcessInstruction.CONTINUE;
		}
		
		private <T> ProcessInstruction visitObject(T object, BiFunction<T, String, ProcessInstruction> processor) {
			if (object != null && pathIterator.hasNext()) {
				String token = pathIterator.next();
				currentPathElements.addLast(object);
				ProcessInstruction instruction = processor.apply(object, token);
				currentPathElements.removeLast();
				pathIterator.previous();
				return instruction;
			}
			return ProcessInstruction.CONTINUE;
		}

		private ProcessInstruction visitPrimitiveValue(Object value) {
			if (value != null) {
				Object[] objectPath = currentPathElements.toArray();
				return visitor.visitResolvedPathValue(path, objectPath, value.toString());
			}
			return ProcessInstruction.CONTINUE;
		}

		private ProcessInstruction visitPrimitiveValueList(List<?> values) {
			if (values != null) {
				Object[] objectPath = currentPathElements.toArray();
				for (Object eachValue : values) {
					ProcessInstruction instruction = visitor.visitResolvedPathValue(path, objectPath, eachValue.toString());
					if (instruction == ProcessInstruction.ABORT) {
						return ProcessInstruction.ABORT;
					}
				}
			}
			return ProcessInstruction.CONTINUE;
		}
	}
}
{{/info}}