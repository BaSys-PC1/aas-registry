/*
 * DotAAS Part 2 | HTTP/REST | Registry and Discovery
 * The registry and discovery interface as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: Final-Draft
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.eclipse.basyx.aas.registry.client.api;

import org.eclipse.basyx.aas.registry.client.ApiException;
import org.eclipse.basyx.aas.registry.model.AssetAdministrationShellDescriptor;
import org.eclipse.basyx.aas.registry.model.Identifier;
import org.eclipse.basyx.aas.registry.model.IdentifierKeyValuePair;
import org.eclipse.basyx.aas.registry.model.SubmodelDescriptor;
import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for RegistryAndDiscoveryInterfaceApi
 */
@Ignore
public class RegistryAndDiscoveryInterfaceApiTest {

    private final RegistryAndDiscoveryInterfaceApi api = new RegistryAndDiscoveryInterfaceApi();

    /**
     * Deletes all Asset identifier key-value-pair linked to an Asset Administration Shell to edit discoverable content
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllAssetLinksByIdTest() throws ApiException {
        String aasIdentifier = null;
        api.deleteAllAssetLinksById(aasIdentifier);

        // TODO: test validations
    }
    /**
     * Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAssetAdministrationShellDescriptorByIdTest() throws ApiException {
        String aasIdentifier = null;
        api.deleteAssetAdministrationShellDescriptorById(aasIdentifier);

        // TODO: test validations
    }
    /**
     * Deletes a Submodel Descriptor, i.e. de-registers a submodel
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubmodelDescriptorByIdTest() throws ApiException {
        String aasIdentifier = null;
        String submodelIdentifier = null;
        api.deleteSubmodelDescriptorById(aasIdentifier, submodelIdentifier);

        // TODO: test validations
    }
    /**
     * Returns all Asset Administration Shell Descriptors
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllAssetAdministrationShellDescriptorsTest() throws ApiException {
        List<AssetAdministrationShellDescriptor> response = api.getAllAssetAdministrationShellDescriptors();

        // TODO: test validations
    }
    /**
     * Returns a list of Asset Administration Shell ids based on Asset identifier key-value-pairs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllAssetAdministrationShellIdsByAssetLinkTest() throws ApiException {
        List<IdentifierKeyValuePair> assetIds = null;
        List<Identifier> response = api.getAllAssetAdministrationShellIdsByAssetLink(assetIds);

        // TODO: test validations
    }
    /**
     * Returns a list of Asset identifier key-value-pairs based on an Asset Administration Shell id to edit discoverable content
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllAssetLinksByIdTest() throws ApiException {
        String aasIdentifier = null;
        List<IdentifierKeyValuePair> response = api.getAllAssetLinksById(aasIdentifier);

        // TODO: test validations
    }
    /**
     * Returns all Submodel Descriptors
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllSubmodelDescriptorsTest() throws ApiException {
        String aasIdentifier = null;
        List<SubmodelDescriptor> response = api.getAllSubmodelDescriptors(aasIdentifier);

        // TODO: test validations
    }
    /**
     * Returns a specific Asset Administration Shell Descriptor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAssetAdministrationShellDescriptorByIdTest() throws ApiException {
        String aasIdentifier = null;
        AssetAdministrationShellDescriptor response = api.getAssetAdministrationShellDescriptorById(aasIdentifier);

        // TODO: test validations
    }
    /**
     * Returns a specific Submodel Descriptor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubmodelDescriptorByIdTest() throws ApiException {
        String aasIdentifier = null;
        String submodelIdentifier = null;
        SubmodelDescriptor response = api.getSubmodelDescriptorById(aasIdentifier, submodelIdentifier);

        // TODO: test validations
    }
    /**
     * Creates all Asset identifier key-value-pair linked to an Asset Administration Shell to edit discoverable content
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAllAssetLinksByIdTest() throws ApiException {
        List<IdentifierKeyValuePair> body = null;
        String aasIdentifier = null;
        List<IdentifierKeyValuePair> response = api.postAllAssetLinksById(body, aasIdentifier);

        // TODO: test validations
    }
    /**
     * Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAssetAdministrationShellDescriptorTest() throws ApiException {
        AssetAdministrationShellDescriptor body = null;
        AssetAdministrationShellDescriptor response = api.postAssetAdministrationShellDescriptor(body);

        // TODO: test validations
    }
    /**
     * Creates a new Submodel Descriptor, i.e. registers a submodel
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubmodelDescriptorTest() throws ApiException {
        SubmodelDescriptor body = null;
        String aasIdentifier = null;
        SubmodelDescriptor response = api.postSubmodelDescriptor(body, aasIdentifier);

        // TODO: test validations
    }
    /**
     * Updates an existing Asset Administration Shell Descriptor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putAssetAdministrationShellDescriptorByIdTest() throws ApiException {
        AssetAdministrationShellDescriptor body = null;
        String aasIdentifier = null;
        api.putAssetAdministrationShellDescriptorById(body, aasIdentifier);

        // TODO: test validations
    }
    /**
     * Updates an existing Submodel Descriptor, i.e. registers a submodel
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSubmodelDescriptorByIdTest() throws ApiException {
        SubmodelDescriptor body = null;
        String aasIdentifier = null;
        String submodelIdentifier = null;
        api.putSubmodelDescriptorById(body, aasIdentifier, submodelIdentifier);

        // TODO: test validations
    }
}
