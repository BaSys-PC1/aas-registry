/*
 * DotAAS Part 2 | HTTP/REST | Registry and Discovery
 * The registry and discovery interface as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: Final-Draft
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.eclipse.basyx.aas.registry.client.api;

import org.eclipse.basyx.aas.registry.client.ApiCallback;
import org.eclipse.basyx.aas.registry.client.ApiClient;
import org.eclipse.basyx.aas.registry.client.ApiException;
import org.eclipse.basyx.aas.registry.client.ApiResponse;
import org.eclipse.basyx.aas.registry.client.Configuration;
import org.eclipse.basyx.aas.registry.client.Pair;
import org.eclipse.basyx.aas.registry.client.ProgressRequestBody;
import org.eclipse.basyx.aas.registry.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.eclipse.basyx.aas.registry.model.AssetAdministrationShellDescriptor;
import org.eclipse.basyx.aas.registry.model.Identifier;
import org.eclipse.basyx.aas.registry.model.IdentifierKeyValuePair;
import org.eclipse.basyx.aas.registry.model.SubmodelDescriptor;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegistryAndDiscoveryInterfaceApi {
    private ApiClient apiClient;

    public RegistryAndDiscoveryInterfaceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegistryAndDiscoveryInterfaceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteAllAssetLinksById
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAllAssetLinksByIdCall(String aasIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/lookup/shells/{aasIdentifier}"
            .replaceAll("\\{" + "aasIdentifier" + "\\}", apiClient.escapeString(aasIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAllAssetLinksByIdValidateBeforeCall(String aasIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'aasIdentifier' is set
        if (aasIdentifier == null) {
            throw new ApiException("Missing the required parameter 'aasIdentifier' when calling deleteAllAssetLinksById(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAllAssetLinksByIdCall(aasIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes all Asset identifier key-value-pair linked to an Asset Administration Shell to edit discoverable content
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAllAssetLinksById(String aasIdentifier) throws ApiException {
        deleteAllAssetLinksByIdWithHttpInfo(aasIdentifier);
    }

    /**
     * Deletes all Asset identifier key-value-pair linked to an Asset Administration Shell to edit discoverable content
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAllAssetLinksByIdWithHttpInfo(String aasIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = deleteAllAssetLinksByIdValidateBeforeCall(aasIdentifier, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes all Asset identifier key-value-pair linked to an Asset Administration Shell to edit discoverable content (asynchronously)
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAllAssetLinksByIdAsync(String aasIdentifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAllAssetLinksByIdValidateBeforeCall(aasIdentifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAssetAdministrationShellDescriptorById
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAssetAdministrationShellDescriptorByIdCall(String aasIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/registry/shell-descriptors/{aasIdentifier}"
            .replaceAll("\\{" + "aasIdentifier" + "\\}", apiClient.escapeString(aasIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAssetAdministrationShellDescriptorByIdValidateBeforeCall(String aasIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'aasIdentifier' is set
        if (aasIdentifier == null) {
            throw new ApiException("Missing the required parameter 'aasIdentifier' when calling deleteAssetAdministrationShellDescriptorById(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAssetAdministrationShellDescriptorByIdCall(aasIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAssetAdministrationShellDescriptorById(String aasIdentifier) throws ApiException {
        deleteAssetAdministrationShellDescriptorByIdWithHttpInfo(aasIdentifier);
    }

    /**
     * Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAssetAdministrationShellDescriptorByIdWithHttpInfo(String aasIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = deleteAssetAdministrationShellDescriptorByIdValidateBeforeCall(aasIdentifier, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS (asynchronously)
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAssetAdministrationShellDescriptorByIdAsync(String aasIdentifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAssetAdministrationShellDescriptorByIdValidateBeforeCall(aasIdentifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSubmodelDescriptorById
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param submodelIdentifier The Submodel’s unique id (BASE64-URL-encoded) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSubmodelDescriptorByIdCall(String aasIdentifier, String submodelIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}"
            .replaceAll("\\{" + "aasIdentifier" + "\\}", apiClient.escapeString(aasIdentifier.toString()))
            .replaceAll("\\{" + "submodelIdentifier" + "\\}", apiClient.escapeString(submodelIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSubmodelDescriptorByIdValidateBeforeCall(String aasIdentifier, String submodelIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'aasIdentifier' is set
        if (aasIdentifier == null) {
            throw new ApiException("Missing the required parameter 'aasIdentifier' when calling deleteSubmodelDescriptorById(Async)");
        }
        // verify the required parameter 'submodelIdentifier' is set
        if (submodelIdentifier == null) {
            throw new ApiException("Missing the required parameter 'submodelIdentifier' when calling deleteSubmodelDescriptorById(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteSubmodelDescriptorByIdCall(aasIdentifier, submodelIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a Submodel Descriptor, i.e. de-registers a submodel
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param submodelIdentifier The Submodel’s unique id (BASE64-URL-encoded) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSubmodelDescriptorById(String aasIdentifier, String submodelIdentifier) throws ApiException {
        deleteSubmodelDescriptorByIdWithHttpInfo(aasIdentifier, submodelIdentifier);
    }

    /**
     * Deletes a Submodel Descriptor, i.e. de-registers a submodel
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param submodelIdentifier The Submodel’s unique id (BASE64-URL-encoded) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSubmodelDescriptorByIdWithHttpInfo(String aasIdentifier, String submodelIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = deleteSubmodelDescriptorByIdValidateBeforeCall(aasIdentifier, submodelIdentifier, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a Submodel Descriptor, i.e. de-registers a submodel (asynchronously)
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param submodelIdentifier The Submodel’s unique id (BASE64-URL-encoded) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSubmodelDescriptorByIdAsync(String aasIdentifier, String submodelIdentifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSubmodelDescriptorByIdValidateBeforeCall(aasIdentifier, submodelIdentifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllAssetAdministrationShellDescriptors
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllAssetAdministrationShellDescriptorsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/registry/shell-descriptors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllAssetAdministrationShellDescriptorsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAllAssetAdministrationShellDescriptorsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns all Asset Administration Shell Descriptors
     * 
     * @return List&lt;AssetAdministrationShellDescriptor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AssetAdministrationShellDescriptor> getAllAssetAdministrationShellDescriptors() throws ApiException {
        ApiResponse<List<AssetAdministrationShellDescriptor>> resp = getAllAssetAdministrationShellDescriptorsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Returns all Asset Administration Shell Descriptors
     * 
     * @return ApiResponse&lt;List&lt;AssetAdministrationShellDescriptor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AssetAdministrationShellDescriptor>> getAllAssetAdministrationShellDescriptorsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllAssetAdministrationShellDescriptorsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<AssetAdministrationShellDescriptor>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns all Asset Administration Shell Descriptors (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllAssetAdministrationShellDescriptorsAsync(final ApiCallback<List<AssetAdministrationShellDescriptor>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllAssetAdministrationShellDescriptorsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AssetAdministrationShellDescriptor>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllAssetAdministrationShellIdsByAssetLink
     * @param assetIds The key-value-pair of an Asset identifier (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllAssetAdministrationShellIdsByAssetLinkCall(List<IdentifierKeyValuePair> assetIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/lookup/shells";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (assetIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "assetIds", assetIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllAssetAdministrationShellIdsByAssetLinkValidateBeforeCall(List<IdentifierKeyValuePair> assetIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAllAssetAdministrationShellIdsByAssetLinkCall(assetIds, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a list of Asset Administration Shell ids based on Asset identifier key-value-pairs
     * 
     * @param assetIds The key-value-pair of an Asset identifier (optional)
     * @return List&lt;Identifier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Identifier> getAllAssetAdministrationShellIdsByAssetLink(List<IdentifierKeyValuePair> assetIds) throws ApiException {
        ApiResponse<List<Identifier>> resp = getAllAssetAdministrationShellIdsByAssetLinkWithHttpInfo(assetIds);
        return resp.getData();
    }

    /**
     * Returns a list of Asset Administration Shell ids based on Asset identifier key-value-pairs
     * 
     * @param assetIds The key-value-pair of an Asset identifier (optional)
     * @return ApiResponse&lt;List&lt;Identifier&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Identifier>> getAllAssetAdministrationShellIdsByAssetLinkWithHttpInfo(List<IdentifierKeyValuePair> assetIds) throws ApiException {
        com.squareup.okhttp.Call call = getAllAssetAdministrationShellIdsByAssetLinkValidateBeforeCall(assetIds, null, null);
        Type localVarReturnType = new TypeToken<List<Identifier>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of Asset Administration Shell ids based on Asset identifier key-value-pairs (asynchronously)
     * 
     * @param assetIds The key-value-pair of an Asset identifier (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllAssetAdministrationShellIdsByAssetLinkAsync(List<IdentifierKeyValuePair> assetIds, final ApiCallback<List<Identifier>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllAssetAdministrationShellIdsByAssetLinkValidateBeforeCall(assetIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Identifier>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllAssetLinksById
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllAssetLinksByIdCall(String aasIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/lookup/shells/{aasIdentifier}"
            .replaceAll("\\{" + "aasIdentifier" + "\\}", apiClient.escapeString(aasIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllAssetLinksByIdValidateBeforeCall(String aasIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'aasIdentifier' is set
        if (aasIdentifier == null) {
            throw new ApiException("Missing the required parameter 'aasIdentifier' when calling getAllAssetLinksById(Async)");
        }
        
        com.squareup.okhttp.Call call = getAllAssetLinksByIdCall(aasIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a list of Asset identifier key-value-pairs based on an Asset Administration Shell id to edit discoverable content
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @return List&lt;IdentifierKeyValuePair&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IdentifierKeyValuePair> getAllAssetLinksById(String aasIdentifier) throws ApiException {
        ApiResponse<List<IdentifierKeyValuePair>> resp = getAllAssetLinksByIdWithHttpInfo(aasIdentifier);
        return resp.getData();
    }

    /**
     * Returns a list of Asset identifier key-value-pairs based on an Asset Administration Shell id to edit discoverable content
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @return ApiResponse&lt;List&lt;IdentifierKeyValuePair&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IdentifierKeyValuePair>> getAllAssetLinksByIdWithHttpInfo(String aasIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getAllAssetLinksByIdValidateBeforeCall(aasIdentifier, null, null);
        Type localVarReturnType = new TypeToken<List<IdentifierKeyValuePair>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of Asset identifier key-value-pairs based on an Asset Administration Shell id to edit discoverable content (asynchronously)
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllAssetLinksByIdAsync(String aasIdentifier, final ApiCallback<List<IdentifierKeyValuePair>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllAssetLinksByIdValidateBeforeCall(aasIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IdentifierKeyValuePair>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllSubmodelDescriptors
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllSubmodelDescriptorsCall(String aasIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors"
            .replaceAll("\\{" + "aasIdentifier" + "\\}", apiClient.escapeString(aasIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllSubmodelDescriptorsValidateBeforeCall(String aasIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'aasIdentifier' is set
        if (aasIdentifier == null) {
            throw new ApiException("Missing the required parameter 'aasIdentifier' when calling getAllSubmodelDescriptors(Async)");
        }
        
        com.squareup.okhttp.Call call = getAllSubmodelDescriptorsCall(aasIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns all Submodel Descriptors
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @return List&lt;SubmodelDescriptor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SubmodelDescriptor> getAllSubmodelDescriptors(String aasIdentifier) throws ApiException {
        ApiResponse<List<SubmodelDescriptor>> resp = getAllSubmodelDescriptorsWithHttpInfo(aasIdentifier);
        return resp.getData();
    }

    /**
     * Returns all Submodel Descriptors
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @return ApiResponse&lt;List&lt;SubmodelDescriptor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SubmodelDescriptor>> getAllSubmodelDescriptorsWithHttpInfo(String aasIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getAllSubmodelDescriptorsValidateBeforeCall(aasIdentifier, null, null);
        Type localVarReturnType = new TypeToken<List<SubmodelDescriptor>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns all Submodel Descriptors (asynchronously)
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllSubmodelDescriptorsAsync(String aasIdentifier, final ApiCallback<List<SubmodelDescriptor>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllSubmodelDescriptorsValidateBeforeCall(aasIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SubmodelDescriptor>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAssetAdministrationShellDescriptorById
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAssetAdministrationShellDescriptorByIdCall(String aasIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/registry/shell-descriptors/{aasIdentifier}"
            .replaceAll("\\{" + "aasIdentifier" + "\\}", apiClient.escapeString(aasIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAssetAdministrationShellDescriptorByIdValidateBeforeCall(String aasIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'aasIdentifier' is set
        if (aasIdentifier == null) {
            throw new ApiException("Missing the required parameter 'aasIdentifier' when calling getAssetAdministrationShellDescriptorById(Async)");
        }
        
        com.squareup.okhttp.Call call = getAssetAdministrationShellDescriptorByIdCall(aasIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a specific Asset Administration Shell Descriptor
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @return AssetAdministrationShellDescriptor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AssetAdministrationShellDescriptor getAssetAdministrationShellDescriptorById(String aasIdentifier) throws ApiException {
        ApiResponse<AssetAdministrationShellDescriptor> resp = getAssetAdministrationShellDescriptorByIdWithHttpInfo(aasIdentifier);
        return resp.getData();
    }

    /**
     * Returns a specific Asset Administration Shell Descriptor
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @return ApiResponse&lt;AssetAdministrationShellDescriptor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AssetAdministrationShellDescriptor> getAssetAdministrationShellDescriptorByIdWithHttpInfo(String aasIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getAssetAdministrationShellDescriptorByIdValidateBeforeCall(aasIdentifier, null, null);
        Type localVarReturnType = new TypeToken<AssetAdministrationShellDescriptor>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a specific Asset Administration Shell Descriptor (asynchronously)
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAssetAdministrationShellDescriptorByIdAsync(String aasIdentifier, final ApiCallback<AssetAdministrationShellDescriptor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAssetAdministrationShellDescriptorByIdValidateBeforeCall(aasIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AssetAdministrationShellDescriptor>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSubmodelDescriptorById
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param submodelIdentifier The Submodel’s unique id (BASE64-URL-encoded) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSubmodelDescriptorByIdCall(String aasIdentifier, String submodelIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}"
            .replaceAll("\\{" + "aasIdentifier" + "\\}", apiClient.escapeString(aasIdentifier.toString()))
            .replaceAll("\\{" + "submodelIdentifier" + "\\}", apiClient.escapeString(submodelIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSubmodelDescriptorByIdValidateBeforeCall(String aasIdentifier, String submodelIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'aasIdentifier' is set
        if (aasIdentifier == null) {
            throw new ApiException("Missing the required parameter 'aasIdentifier' when calling getSubmodelDescriptorById(Async)");
        }
        // verify the required parameter 'submodelIdentifier' is set
        if (submodelIdentifier == null) {
            throw new ApiException("Missing the required parameter 'submodelIdentifier' when calling getSubmodelDescriptorById(Async)");
        }
        
        com.squareup.okhttp.Call call = getSubmodelDescriptorByIdCall(aasIdentifier, submodelIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a specific Submodel Descriptor
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param submodelIdentifier The Submodel’s unique id (BASE64-URL-encoded) (required)
     * @return SubmodelDescriptor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SubmodelDescriptor getSubmodelDescriptorById(String aasIdentifier, String submodelIdentifier) throws ApiException {
        ApiResponse<SubmodelDescriptor> resp = getSubmodelDescriptorByIdWithHttpInfo(aasIdentifier, submodelIdentifier);
        return resp.getData();
    }

    /**
     * Returns a specific Submodel Descriptor
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param submodelIdentifier The Submodel’s unique id (BASE64-URL-encoded) (required)
     * @return ApiResponse&lt;SubmodelDescriptor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SubmodelDescriptor> getSubmodelDescriptorByIdWithHttpInfo(String aasIdentifier, String submodelIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getSubmodelDescriptorByIdValidateBeforeCall(aasIdentifier, submodelIdentifier, null, null);
        Type localVarReturnType = new TypeToken<SubmodelDescriptor>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a specific Submodel Descriptor (asynchronously)
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param submodelIdentifier The Submodel’s unique id (BASE64-URL-encoded) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubmodelDescriptorByIdAsync(String aasIdentifier, String submodelIdentifier, final ApiCallback<SubmodelDescriptor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubmodelDescriptorByIdValidateBeforeCall(aasIdentifier, submodelIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubmodelDescriptor>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAllAssetLinksById
     * @param body Asset identifier key-value-pairs (required)
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAllAssetLinksByIdCall(List<IdentifierKeyValuePair> body, String aasIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/lookup/shells/{aasIdentifier}"
            .replaceAll("\\{" + "aasIdentifier" + "\\}", apiClient.escapeString(aasIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAllAssetLinksByIdValidateBeforeCall(List<IdentifierKeyValuePair> body, String aasIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postAllAssetLinksById(Async)");
        }
        // verify the required parameter 'aasIdentifier' is set
        if (aasIdentifier == null) {
            throw new ApiException("Missing the required parameter 'aasIdentifier' when calling postAllAssetLinksById(Async)");
        }
        
        com.squareup.okhttp.Call call = postAllAssetLinksByIdCall(body, aasIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates all Asset identifier key-value-pair linked to an Asset Administration Shell to edit discoverable content
     * 
     * @param body Asset identifier key-value-pairs (required)
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @return List&lt;IdentifierKeyValuePair&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IdentifierKeyValuePair> postAllAssetLinksById(List<IdentifierKeyValuePair> body, String aasIdentifier) throws ApiException {
        ApiResponse<List<IdentifierKeyValuePair>> resp = postAllAssetLinksByIdWithHttpInfo(body, aasIdentifier);
        return resp.getData();
    }

    /**
     * Creates all Asset identifier key-value-pair linked to an Asset Administration Shell to edit discoverable content
     * 
     * @param body Asset identifier key-value-pairs (required)
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @return ApiResponse&lt;List&lt;IdentifierKeyValuePair&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IdentifierKeyValuePair>> postAllAssetLinksByIdWithHttpInfo(List<IdentifierKeyValuePair> body, String aasIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = postAllAssetLinksByIdValidateBeforeCall(body, aasIdentifier, null, null);
        Type localVarReturnType = new TypeToken<List<IdentifierKeyValuePair>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates all Asset identifier key-value-pair linked to an Asset Administration Shell to edit discoverable content (asynchronously)
     * 
     * @param body Asset identifier key-value-pairs (required)
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAllAssetLinksByIdAsync(List<IdentifierKeyValuePair> body, String aasIdentifier, final ApiCallback<List<IdentifierKeyValuePair>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAllAssetLinksByIdValidateBeforeCall(body, aasIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IdentifierKeyValuePair>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAssetAdministrationShellDescriptor
     * @param body Asset Administration Shell Descriptor object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAssetAdministrationShellDescriptorCall(AssetAdministrationShellDescriptor body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/registry/shell-descriptors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAssetAdministrationShellDescriptorValidateBeforeCall(AssetAdministrationShellDescriptor body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postAssetAdministrationShellDescriptor(Async)");
        }
        
        com.squareup.okhttp.Call call = postAssetAdministrationShellDescriptorCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS
     * 
     * @param body Asset Administration Shell Descriptor object (required)
     * @return AssetAdministrationShellDescriptor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AssetAdministrationShellDescriptor postAssetAdministrationShellDescriptor(AssetAdministrationShellDescriptor body) throws ApiException {
        ApiResponse<AssetAdministrationShellDescriptor> resp = postAssetAdministrationShellDescriptorWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS
     * 
     * @param body Asset Administration Shell Descriptor object (required)
     * @return ApiResponse&lt;AssetAdministrationShellDescriptor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AssetAdministrationShellDescriptor> postAssetAdministrationShellDescriptorWithHttpInfo(AssetAdministrationShellDescriptor body) throws ApiException {
        com.squareup.okhttp.Call call = postAssetAdministrationShellDescriptorValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<AssetAdministrationShellDescriptor>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS (asynchronously)
     * 
     * @param body Asset Administration Shell Descriptor object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAssetAdministrationShellDescriptorAsync(AssetAdministrationShellDescriptor body, final ApiCallback<AssetAdministrationShellDescriptor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAssetAdministrationShellDescriptorValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AssetAdministrationShellDescriptor>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postSubmodelDescriptor
     * @param body Submodel Descriptor object (required)
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postSubmodelDescriptorCall(SubmodelDescriptor body, String aasIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors"
            .replaceAll("\\{" + "aasIdentifier" + "\\}", apiClient.escapeString(aasIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postSubmodelDescriptorValidateBeforeCall(SubmodelDescriptor body, String aasIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postSubmodelDescriptor(Async)");
        }
        // verify the required parameter 'aasIdentifier' is set
        if (aasIdentifier == null) {
            throw new ApiException("Missing the required parameter 'aasIdentifier' when calling postSubmodelDescriptor(Async)");
        }
        
        com.squareup.okhttp.Call call = postSubmodelDescriptorCall(body, aasIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a new Submodel Descriptor, i.e. registers a submodel
     * 
     * @param body Submodel Descriptor object (required)
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @return SubmodelDescriptor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SubmodelDescriptor postSubmodelDescriptor(SubmodelDescriptor body, String aasIdentifier) throws ApiException {
        ApiResponse<SubmodelDescriptor> resp = postSubmodelDescriptorWithHttpInfo(body, aasIdentifier);
        return resp.getData();
    }

    /**
     * Creates a new Submodel Descriptor, i.e. registers a submodel
     * 
     * @param body Submodel Descriptor object (required)
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @return ApiResponse&lt;SubmodelDescriptor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SubmodelDescriptor> postSubmodelDescriptorWithHttpInfo(SubmodelDescriptor body, String aasIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = postSubmodelDescriptorValidateBeforeCall(body, aasIdentifier, null, null);
        Type localVarReturnType = new TypeToken<SubmodelDescriptor>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new Submodel Descriptor, i.e. registers a submodel (asynchronously)
     * 
     * @param body Submodel Descriptor object (required)
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postSubmodelDescriptorAsync(SubmodelDescriptor body, String aasIdentifier, final ApiCallback<SubmodelDescriptor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postSubmodelDescriptorValidateBeforeCall(body, aasIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubmodelDescriptor>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putAssetAdministrationShellDescriptorById
     * @param body Asset Administration Shell Descriptor object (required)
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putAssetAdministrationShellDescriptorByIdCall(AssetAdministrationShellDescriptor body, String aasIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/registry/shell-descriptors/{aasIdentifier}"
            .replaceAll("\\{" + "aasIdentifier" + "\\}", apiClient.escapeString(aasIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putAssetAdministrationShellDescriptorByIdValidateBeforeCall(AssetAdministrationShellDescriptor body, String aasIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putAssetAdministrationShellDescriptorById(Async)");
        }
        // verify the required parameter 'aasIdentifier' is set
        if (aasIdentifier == null) {
            throw new ApiException("Missing the required parameter 'aasIdentifier' when calling putAssetAdministrationShellDescriptorById(Async)");
        }
        
        com.squareup.okhttp.Call call = putAssetAdministrationShellDescriptorByIdCall(body, aasIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates an existing Asset Administration Shell Descriptor
     * 
     * @param body Asset Administration Shell Descriptor object (required)
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putAssetAdministrationShellDescriptorById(AssetAdministrationShellDescriptor body, String aasIdentifier) throws ApiException {
        putAssetAdministrationShellDescriptorByIdWithHttpInfo(body, aasIdentifier);
    }

    /**
     * Updates an existing Asset Administration Shell Descriptor
     * 
     * @param body Asset Administration Shell Descriptor object (required)
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putAssetAdministrationShellDescriptorByIdWithHttpInfo(AssetAdministrationShellDescriptor body, String aasIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = putAssetAdministrationShellDescriptorByIdValidateBeforeCall(body, aasIdentifier, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates an existing Asset Administration Shell Descriptor (asynchronously)
     * 
     * @param body Asset Administration Shell Descriptor object (required)
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putAssetAdministrationShellDescriptorByIdAsync(AssetAdministrationShellDescriptor body, String aasIdentifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putAssetAdministrationShellDescriptorByIdValidateBeforeCall(body, aasIdentifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for putSubmodelDescriptorById
     * @param body Submodel Descriptor object (required)
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param submodelIdentifier The Submodel’s unique id (BASE64-URL-encoded) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putSubmodelDescriptorByIdCall(SubmodelDescriptor body, String aasIdentifier, String submodelIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}"
            .replaceAll("\\{" + "aasIdentifier" + "\\}", apiClient.escapeString(aasIdentifier.toString()))
            .replaceAll("\\{" + "submodelIdentifier" + "\\}", apiClient.escapeString(submodelIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putSubmodelDescriptorByIdValidateBeforeCall(SubmodelDescriptor body, String aasIdentifier, String submodelIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putSubmodelDescriptorById(Async)");
        }
        // verify the required parameter 'aasIdentifier' is set
        if (aasIdentifier == null) {
            throw new ApiException("Missing the required parameter 'aasIdentifier' when calling putSubmodelDescriptorById(Async)");
        }
        // verify the required parameter 'submodelIdentifier' is set
        if (submodelIdentifier == null) {
            throw new ApiException("Missing the required parameter 'submodelIdentifier' when calling putSubmodelDescriptorById(Async)");
        }
        
        com.squareup.okhttp.Call call = putSubmodelDescriptorByIdCall(body, aasIdentifier, submodelIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates an existing Submodel Descriptor, i.e. registers a submodel
     * 
     * @param body Submodel Descriptor object (required)
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param submodelIdentifier The Submodel’s unique id (BASE64-URL-encoded) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putSubmodelDescriptorById(SubmodelDescriptor body, String aasIdentifier, String submodelIdentifier) throws ApiException {
        putSubmodelDescriptorByIdWithHttpInfo(body, aasIdentifier, submodelIdentifier);
    }

    /**
     * Updates an existing Submodel Descriptor, i.e. registers a submodel
     * 
     * @param body Submodel Descriptor object (required)
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param submodelIdentifier The Submodel’s unique id (BASE64-URL-encoded) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putSubmodelDescriptorByIdWithHttpInfo(SubmodelDescriptor body, String aasIdentifier, String submodelIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = putSubmodelDescriptorByIdValidateBeforeCall(body, aasIdentifier, submodelIdentifier, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates an existing Submodel Descriptor, i.e. registers a submodel (asynchronously)
     * 
     * @param body Submodel Descriptor object (required)
     * @param aasIdentifier The Asset Administration Shell’s unique id (BASE64-URL-encoded) (required)
     * @param submodelIdentifier The Submodel’s unique id (BASE64-URL-encoded) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putSubmodelDescriptorByIdAsync(SubmodelDescriptor body, String aasIdentifier, String submodelIdentifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putSubmodelDescriptorByIdValidateBeforeCall(body, aasIdentifier, submodelIdentifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
