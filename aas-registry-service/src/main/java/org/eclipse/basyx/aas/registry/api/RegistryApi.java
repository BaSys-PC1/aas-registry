/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.eclipse.basyx.aas.registry.api;

import org.eclipse.basyx.aas.registry.model.AssetAdministrationShellDescriptor;
import org.eclipse.basyx.aas.registry.model.SubmodelDescriptor;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-11-03T09:35:10.988Z[GMT]")
@Validated
//@RequestMapping("api/v1/")
public interface RegistryApi {

    @Operation(summary = "Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS", description = "", tags={ "Registry and Discovery Interface" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Asset Administration Shell Descriptor deleted successfully") })
    @RequestMapping(value = "/registry/shell-descriptors/{aasIdentifier}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAssetAdministrationShellDescriptorById(@Parameter(in = ParameterIn.PATH, description = "The Asset Administration Shell’s unique id (BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("aasIdentifier") String aasIdentifier);


    @Operation(summary = "Deletes a Submodel Descriptor, i.e. de-registers a submodel", description = "", tags={ "Registry and Discovery Interface" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Submodel Descriptor deleted successfully") })
    @RequestMapping(value = "/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSubmodelDescriptorById(@Parameter(in = ParameterIn.PATH, description = "The Asset Administration Shell’s unique id (BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("aasIdentifier") String aasIdentifier, @Parameter(in = ParameterIn.PATH, description = "The Submodel’s unique id (BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("submodelIdentifier") String submodelIdentifier);


    @Operation(summary = "Returns all Asset Administration Shell Descriptors", description = "", tags={ "Registry and Discovery Interface" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Requested Asset Administration Shell Descriptors", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AssetAdministrationShellDescriptor.class)))) })
    @RequestMapping(value = "/registry/shell-descriptors",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AssetAdministrationShellDescriptor>> getAllAssetAdministrationShellDescriptors();


    @Operation(summary = "Returns all Submodel Descriptors", description = "", tags={ "Registry and Discovery Interface" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Requested Submodel Descriptors", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = SubmodelDescriptor.class)))) })
    @RequestMapping(value = "/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<SubmodelDescriptor>> getAllSubmodelDescriptors(@Parameter(in = ParameterIn.PATH, description = "The Asset Administration Shell’s unique id (BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("aasIdentifier") String aasIdentifier);


    @Operation(summary = "Returns a specific Asset Administration Shell Descriptor", description = "", tags={ "Registry and Discovery Interface" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Requested Asset Administration Shell Descriptor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AssetAdministrationShellDescriptor.class))) })
    @RequestMapping(value = "/registry/shell-descriptors/{aasIdentifier}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AssetAdministrationShellDescriptor> getAssetAdministrationShellDescriptorById(@Parameter(in = ParameterIn.PATH, description = "The Asset Administration Shell’s unique id (BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("aasIdentifier") String aasIdentifier);


    @Operation(summary = "Returns a specific Submodel Descriptor", description = "", tags={ "Registry and Discovery Interface" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Requested Submodel Descriptor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SubmodelDescriptor.class))) })
    @RequestMapping(value = "/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SubmodelDescriptor> getSubmodelDescriptorById(@Parameter(in = ParameterIn.PATH, description = "The Asset Administration Shell’s unique id (BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("aasIdentifier") String aasIdentifier, @Parameter(in = ParameterIn.PATH, description = "The Submodel’s unique id (BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("submodelIdentifier") String submodelIdentifier);


    @Operation(summary = "Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS", description = "", tags={ "Registry and Discovery Interface" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Asset Administration Shell Descriptor created successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AssetAdministrationShellDescriptor.class))) })
    @RequestMapping(value = "/registry/shell-descriptors",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<AssetAdministrationShellDescriptor> postAssetAdministrationShellDescriptor(@Parameter(in = ParameterIn.DEFAULT, description = "Asset Administration Shell Descriptor object", required=true, schema=@Schema()) @Valid @RequestBody AssetAdministrationShellDescriptor body);


    @Operation(summary = "Creates a new Submodel Descriptor, i.e. registers a submodel", description = "", tags={ "Registry and Discovery Interface" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Submodel Descriptor created successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SubmodelDescriptor.class))) })
    @RequestMapping(value = "/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SubmodelDescriptor> postSubmodelDescriptor(@Parameter(in = ParameterIn.PATH, description = "The Asset Administration Shell’s unique id (BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("aasIdentifier") String aasIdentifier, @Parameter(in = ParameterIn.DEFAULT, description = "Submodel Descriptor object", required=true, schema=@Schema()) @Valid @RequestBody SubmodelDescriptor body);


    @Operation(summary = "Updates an existing Asset Administration Shell Descriptor", description = "", tags={ "Registry and Discovery Interface" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Asset Administration Shell Descriptor updated successfully") })
    @RequestMapping(value = "/registry/shell-descriptors/{aasIdentifier}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> putAssetAdministrationShellDescriptorById(@Parameter(in = ParameterIn.PATH, description = "The Asset Administration Shell’s unique id (BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("aasIdentifier") String aasIdentifier, @Parameter(in = ParameterIn.DEFAULT, description = "Asset Administration Shell Descriptor object", required=true, schema=@Schema()) @Valid @RequestBody AssetAdministrationShellDescriptor body);


    @Operation(summary = "Updates an existing Submodel Descriptor, i.e. registers a submodel", description = "", tags={ "Registry and Discovery Interface" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Submodel Descriptor updated successfully") })
    @RequestMapping(value = "/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> putSubmodelDescriptorById(@Parameter(in = ParameterIn.PATH, description = "The Asset Administration Shell’s unique id (BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("aasIdentifier") String aasIdentifier, @Parameter(in = ParameterIn.PATH, description = "The Submodel’s unique id (BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("submodelIdentifier") String submodelIdentifier, @Parameter(in = ParameterIn.DEFAULT, description = "Submodel Descriptor object", required=true, schema=@Schema()) @Valid @RequestBody SubmodelDescriptor body);

}

